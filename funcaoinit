public static void init(String input){
    Pattern classPattern = Pattern.compile("^\\s*class\\s+([a-zA-Z]+)\\s*\\n$");
    Matcher classMatcher = classPattern.matcher(input);
    Pattern methodPattern = Pattern.compile("^\\s*method\\s+([a-zA-Z]+)\\(([a-zA-Z]+(,\\s*[a-zA-Z]+)*)*\\)\\s*\\n$");
    Matcher methodMatcher = methodPattern.matcher(input);
    Pattern mainPattern = Pattern.compile("^\\s*main\\s*\\(\\)\\s*\\n$");
    Matcher mainMatcher = mainPattern.matcher(input);
    Pattern varsPattern = Pattern.compile("^\\s*vars\\s+([a-zA-Z]+(\\s*,\\s*[a-zA-Z]+)*)\\s*\\n$");
    Matcher varsMatcher = varsPattern.matcher(input);
    try(Scanner scanner = new Scanner(Paths.get(input))) {
        Integer lineInt = 0;
        String line = scanner.nextLine();
        while(scanner.hasNextLine()){
            if(classMatcher.find()){
                List<String> attributes = new ArrayList<>();
                Integer classLine;
                classLine = lineInt;
                String className = classMatcher.group(1);
                attributes.add("_prototype");
                while(scanner.hasNextLine() && !line.equals("^\\s*end-class\\s*\\n$")){
                    line = scanner.nextLine();
                    lineInt++;           
                    if(varsMatcher.find()){
                        for(String attribute : varsMatcher.group(1).split("\\s*,\\s*")){
                            attributes.add(attribute);
                        }
                    }else if(methodMatcher.find()){
                        List<String> metVariables = new ArrayList<>();
                        Queue<String> arguments = new LinkedList<>();
                        Integer methodLine = lineInt;
                        String methodName = methodMatcher.group(1);
                        for(String argument : methodMatcher.group(2).split("\\s*,\\s*")){
                            arguments.add(argument);
                        }
                        metVariables.add("self");
                        while(scanner.hasNextLine() && !line.equals("^\\s*begin\\s*\\n$")){
                            if(varsMatcher.find()){
                                for(String attribute : varsMatcher.group(1).split("\\s*,\\s*")){
                                    metVariables.add(attribute);
                                }
                            }
                        }
                        Definition method = new Definition(metVariables, arguments, methodLine);
                        map.put(className + "|" + methodName, method);
                    }
                }
                Definition Class = new Definition(attributes, classLine);
                map.put(className, Class);
            }else if(mainMatcher.find()){
                List<String> mainAttributes = new ArrayList<>();
                Integer mainLine = lineInt;
                while(scanner.hasNextLine() && !line.equals("^\\s*begin\\s*\\n$")){
                    line = scanner.nextLine();
                    lineInt++;           
                    if(varsMatcher.find()){
                        for(String attribute : varsMatcher.group(1).split("\\s*,\\s*")){
                            mainAttributes.add(attribute);
                        }
                    }
                }
                Definition Main = new Definition(mainAttributes, mainLine);
                map.put("main", Main);
                for(String abc : mainAttributes){
                    System.out.println(abc);
                }
            }
            line = scanner.nextLine();
            lineInt++;
        }
    } catch(Exception e) {
        System.out.println("Arquivo invi√°vel!");
        e.printStackTrace();
    }
}